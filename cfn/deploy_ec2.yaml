Parameters:
  InstanceTypeParameter:
    Type: String
    Default: "m6i.large"
    AllowedValues:
      - t2.micro
      - m5.small
      - m6i.large
    Description: Default is t2.micro.
  ImageIDParameter:
    Type: String
    Default: "ami-005f9685cb30f234b"
    AllowedValues:
      - ami-005f9685cb30f234b
    Description: Amazon Linux AMI.
  KeyIDParameter:
    Type: String
    Default: "globalrx_sshkey"
  NameParameter:
    Type: String
    Default: "CFN_TEST"
    Description: Value for Name Tag
  EmailParameter:
    Type: String
    Default: "aeg224@g.harvard.edu"
    Description: email for django admin user
  VPCParameter:
    Type: String
    Default: "vpc-23074059"
    Description: VPC ID
  DBEndpointParameter:
    Type: String
    Default: "asdf-globalrxdb-axodhrci4xgh.cj9gkkj3it4b.us-east-1.rds.amazonaws.com"
    Description: DB Endpoint

Resources:
  globalRxKey:
    Type: AWS::EC2::KeyPair
    Properties: 
      KeyName: !Ref KeyIDParameter
      PublicKeyMaterial: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDel37v9xkR2BF6xyaXvSylZ7ZL5nUDynVaPPxXt7JTPVj3AMp6BWx/+YJh75lorOx+rsJJo8uwq67bnfV/BBPkRyvXDU68U2BSmg7YOxDYJH4d6tizQV3NKD0v3NSYdQYk11GJx1HOe/5Ye7YujTaF7bwoDXu45vrE2HzMZLTdDveeMl5866Q78GMOZLTvw9okjT1d/THHmXEwzAftnwir1PuEtEvrQ6QZ0iVO0hDAbSbXYeZl1g/G1qi+Z0AI+aeyshZQFzhYdWA2M5tSNe71RlVw6reBdQ+mP4vQyPI72GxWpTU8mQ65PoB/EEayaF+bQUewaC7lQ1LyygVZbS68KFbUjD03y5DMcdyWXRIjTYGaB0oB1zzQ9A6eGuEmPw4lFTkKRllfRXmAj81E9lp0Ge+eSKmRuuahckvFtDnFD2tSVvVSXnKg/WivNDyVOYVzTPEePdnCFw4EYcwB1anKnBX/0RbfBzq3Cx7S3fVYcJIEwJ66jVKeuQEpHzO9qz0=
      Tags:
        - Key: Name
          Value: globalRx1

  globalRxEc2:
    Type: AWS::EC2::Instance
    DependsOn: globalRxKey
    Properties:
      ImageId: !Ref ImageIDParameter
      InstanceType: !Ref InstanceTypeParameter
      IamInstanceProfile: "globalRX"
      KeyName: !Ref KeyIDParameter
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            DeleteOnTermination: True
            VolumeSize: 100
            VolumeType: gp3
      SecurityGroupIds:
        - !GetAtt "globalRxSecGroup.GroupId"
      SubnetId: "subnet-01f4190f"
      Tags:
        - Key: Name
          Value: !Ref NameParameter
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install docker -y
            systemctl enable docker
            systemctl start docker
            yum install git -y
            curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

            cd /home/ec2-user
            git clone https://github.com/globalrx/globalrx.git
            cd /home/ec2-user/globalrx/dle
            git checkout elasticsearch-django

            EMAIL=${EmailParameter}
            cp .env.example .env
            sed "s/DJANGO_SUPERUSER_EMAIL.*/DJANGO_SUPERUSER_EMAIL="$EMAIL"/g" -i /home/ec2-user/globalrx/dle/.env

            IP=$(dig +short txt ch whoami.cloudflare @1.0.0.1  | tr -d '"')
            sed "s/ALLOWED_HOSTS = \[/ALLOWED_HOSTS = \["\"$IP\"",/g" -i /home/ec2-user/globalrx/dle/dle/settings.py
            DB_ENDPOINT=${DBEndpointParameter}
            sed "s/DATABASE_URL.*/DATABASE_URL=$DB_ENDPOINT/g" -i /home/ec2-user/globalrx/dle/.env

            cd /home/ec2-user
            echo "#!/bin/sh" > start_script.sh
            echo "cd /home/ec2-user/globalrx/dle" >> start_script.sh
            echo "/usr/local/bin/docker-compose up" >> start_script.sh
            chmod 755 start_script.sh
            nohup ./start_script.sh > output & 
#nohup ./start_script.sh > output &
#sed "s/DATABASE_URL.*/DATABASE_URL=test-nestedstackrds-15n6nr35w3r0n-globalrxdb-gd0s0nru6f80.cj9gkkj3it4b.us-east-1.rds.amazonaws.com" -i /home/ec2-user/globalrx/dle/settings.py
#            sed 's/LOAD=False/LOAD=True/g' -i /home/ec2-user/globalrx/dle/.env


#- admin_email: !Ref EmailParameter
#- db_endpoint: !Ref DBEndpointParameter 








#sed 's/LOAD=False/LOAD=True/g' -i /home/ec2-user/globalrx/dle/.env
 
#/usr/local/bin/docker-compose up 

#docker exec -it dle-django-1 'python /app/manage.py load_ema_data'
#docker exec -it dle-django-1 'python /app/manage.py load_fda_data'

#docker commit dle-django-1 300423063901.dkr.ecr.us-east-1.amazonaws.com/django:latest
#docker commit dle-postgres-1 300423063901.dkr.ecr.us-east-1.amazonaws.com/postgres:latest
#docker commit dle-kibana-1 300423063901.dkr.ecr.us-east-1.amazonaws.com/kibana:latest
#docker commit dle-es01-1 300423063901.dkr.ecr.us-east-1.amazonaws.com/elasticsearch:latest

#aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 300423063901.dkr.ecr.us-east-1.amazonaws.com

#docker push 300423063901.dkr.ecr.us-east-1.amazonaws.com/django:latest
#docker push 300423063901.dkr.ecr.us-east-1.amazonaws.com/postgres:latest
#docker push 300423063901.dkr.ecr.us-east-1.amazonaws.com/kibana:latest
#docker push 300423063901.dkr.ecr.us-east-1.amazonaws.com/elasticsearch:latest



  globalRxSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open 22 and 8000
      VpcId: !Ref VPCParameter
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0 
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '8000'
            ToPort: '8000'
            CidrIp: 0.0.0.0/0 



  globalRxRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
  GlobalRXProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      InstanceProfileName: globalRX
      Roles:
      - !Ref globalRxRole

