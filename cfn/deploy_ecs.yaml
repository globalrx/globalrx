AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ElasticIPAddress:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /ec2_ip
  DBEndpointParameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /rds_endpoint
  rdsPword:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /rds_pword
  kibanaPword:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /kibana_pw    
  elasticPword:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /elastic_pw    
  secretPword:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /secret_pw    
  imageUrl:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /image_url
  subnet1:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /public_subnet_1
  subnet2:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /public_subnet_2
  loadBalancerArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /ecs_lb
  VPCParameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /vpc_id
  ecsServiceName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /ecs_service_name
  ecsClusterName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /ecs_cluster_name
  awsAccessKey:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /access_key
  awsSecretKey:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /secret_key

Resources:
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project dle
      Name: dle.local
      Vpc: !Ref VPCParameter
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace

  Cluster:
    Properties:
      ClusterName: !Ref ecsClusterName
      Tags:
      - Key: com.docker.compose.project
        Value: dle
    Type: AWS::ECS::Cluster
  Default8000Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: django:8000/tcp on default network
      FromPort: 8000
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 8000
    Type: AWS::EC2::SecurityGroupIngress
  DefaultNetwork:
    Properties:
      GroupDescription: dle Security Group for default network
      Tags:
      - Key: com.docker.compose.project
        Value: dle
      - Key: com.docker.compose.network
        Value: dle_default
      VpcId: !Ref VPCParameter
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  DjangoService:
    DependsOn:
    - DjangoTCP8000Listener
    Properties:
      ServiceName: !Ref ecsServiceName
      EnableExecuteCommand: True
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: django
        ContainerPort: 8000
        TargetGroupArn:
          Ref: DjangoTCP8000TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - !Ref subnet1
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - DjangoServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: dle
      - Key: com.docker.compose.service
        Value: django
      TaskDefinition:
        Ref: DjangoTaskDefinition
    Type: AWS::ECS::Service
  DjangoServiceDiscoveryEntry:
    Properties:
      Description: '"django" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: django
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  DjangoTCP8000Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: DjangoTCP8000TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: loadBalancerArn
      Port: 8000
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  DjangoTCP8000TargetGroup:
    Properties:
      Port: 8000
      Protocol: TCP
      Tags:
      - Key: com.docker.compose.project
        Value: dle
      TargetType: ip
      VpcId: !Ref VPCParameter
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  DjangoTaskDefinition:
    Properties:
      EphemeralStorage:
        SizeInGiB: 40
      TaskRoleArn: !Ref DjangoTaskExecutionRole
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - dle.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: dle
        Name: Django_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Django_ResolvConf_InitContainer
        Environment:
        - Name: AWS_ACCESS_KEY
          Value: !Ref awsAccessKey
        - Name: AWS_ACCESS_KEY_ID
          Value: !Ref awsAccessKey
        - Name: AWS_SECRET_ACCESS_KEY
          Value: !Ref awsSecretKey
        - Name: ALLOWED_HOSTS
          Value: '*'
        - Name: APPLICATION_IP
          Value: !Ref ElasticIPAddress
        - Name: CLUSTER_NAME
          Value: dle-elastic-cluster
        - Name: COMPOSE_PROJECT_NAME
          Value: searchrx
        - Name: DATABASE_URL
          Value: !Sub "postgres://postgres:${rdsPword}@${DBEndpointParameter}:5432/postgres" 
        - Name: DEBUG
          Value: "True"
        - Name: DJANGO_SUPERUSER_EMAIL
          Value: aeg224@g.harvard.edu
        - Name: DJANGO_SUPERUSER_PASSWORD
          Value: Wtb8qbY0kH54bF
        - Name: DJANGO_SUPERUSER_USERNAME
          Value: admin
        - Name: ELASTICSEARCH_URL
          Value: !Sub "http://${ElasticIPAddress}:9200"
        - Name: ELASTICSEARCH_USER
          Value: elastic
        - Name: ELASTIC_CLOUD_ID
          Value: AppName:longRaNd0MStringofChars
        - Name: ELASTIC_CLOUD_PASSWORD
          Value: RandomGenPWD
        - Name: ELASTIC_PASSWORD
          Value: !Ref elasticPword
        - Name: ES_AUTO_SYNC
          Value: "False"
        - Name: ES_PORT
          Value: "9200"
        - Name: INIT_SUPERUSER
          Value: "False"
        - Name: LOAD
          Value: "False"
        - Name: MIGRATE
          Value: "False"
        - Name: POSTGRES_DB
          Value: postgres
        - Name: POSTGRES_HOST
          Value: postgres
        - Name: POSTGRES_PASSWORD
          Value: !Ref rdsPword 
        - Name: POSTGRES_PORT
          Value: "5432"
        - Name: POSTGRES_USER
          Value: postgres
        - Name: SECRET_KEY
          Value: !Ref secretPword
        - Name: STACK_VERSION
          Value: 8.5.0
        Essential: true
        Image: !Ref imageUrl 
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: dle
        Name: django
        PortMappings:
        - ContainerPort: 8000
          HostPort: 8000
          Protocol: tcp
      Cpu: "4096"
      ExecutionRoleArn:
        Ref: DjangoTaskExecutionRole
      Family: dle-django
      Memory: "8192"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  DjangoTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      Tags:
      - Key: com.docker.compose.project
        Value: dle
      - Key: com.docker.compose.service
        Value: django
    Type: AWS::IAM::Role
  LogGroup:
    Properties:
      LogGroupName: /ecs/searchrx
    Type: AWS::Logs::LogGroup







Outputs:
  taskName:
    Description: task ID 
    Value: !Ref DjangoTaskDefinition










