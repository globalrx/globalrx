#!/bin/bash

set -o errexit
set -o pipefail

until python3 /app/postgres_ready.py; do
  >&2 echo "Waiting for PostgreSQL to become available..."
  sleep 1
done
>&2 echo "PostgreSQL is available"


if [[ ($MIGRATE) && ("$MIGRATE" = "True") ]]; then
  python3 manage.py makemigrations --no-input
  python3 manage.py migrate --no-input --fake-initial
  echo "Migrations finished"
  python3 manage.py collectstatic --noinput
  echo "Static files collected"
fi


if [[ ($INIT_SUPERUSER) && ("$INIT_SUPERUSER" = "True") ]]; then
  # Uses the DJANGO_SUPERUSER_* environment variables to create a superuser
  # TODO find a way to only run createsuperuser if it doesn't already exist
  echo "Creating superuser"
  python3 manage.py create_superuser_if_none_exists --user $DJANGO_SUPERUSER_USERNAME --email $DJANGO_SUPERUSER_EMAIL --password $DJANGO_SUPERUSER_PASSWORD
fi


# Load fixtures, a JSON file containing the data for the database
# Place the JSON file in /app/data/fixtures (from S3 unless we switch to Git LFS)
if [[ ($LOAD_FIXTURES) && ("$LOAD_FIXTURES" = "True") ]]; then
  echo "Loading fixtures"
  python3 manage.py loaddata /app/data/fixtures/*.json
  echo "Finished loading fixtures"
fi


# Otherwise, if not loading fixtures, you can run a scrape for new data
# This will take a long time
if [[ ($LOAD) && ("$LOAD" = "True") ]]; then
  echo "Beginning the Django data ingest"
  echo "Loading EMA (EU) data"
  python3 manage.py load_ema_data --type full
  echo "Finished loading EMA (EU) data"
  echo "Loading FDA (US) data"
  python3 manage.py load_fda_data --type full
  echo "Finished loading FDA (US) data"
  echo "Loading TGA (Australia) data"
  python3 manage.py load_tga_data --type full
  echo "Finished loading TGA (Australia) data"
  echo "Updating latest drug labels"
  echo "Loading HC (Health Canada) data"
  python3 manage.py load_hc_data --type full
  echo "Finished loading HC (Health Canada) data"
  python3 manage.py update_latest_drug_labels
  echo "Finished updating latest drug labels"
  echo "Ended the Django data ingest"
fi


# Loading pre-computed vectors
# This was an attempt to speed up the vectorization process, as vectorization is slow within container.
# However, using fixtures seems to be better because it's hard to get a good composite structure
# for the vectors JSON file - composite key of drug ID + agency + version_date.
if [[ ($LOAD_FDA_VECTORS) && ("$LOAD_FDA_VECTORS" = "True")]]; then
  # You must have pre-vectorized texts and placed the appropriate JSON file in /media
  echo "Starting to load FDA vectors into Django"
  python3 manage.py vectorize --elasticingest False --agency FDA --vector_file "/app/media/fda_vectors.json"
  echo "FDA vectors loaded!"
fi
if [[ ($LOAD_TGA_VECTORS) && ("$LOAD_TGA_VECTORS" = "True")]]; then
  # You must have pre-vectorized texts and placed the appropriate JSON file in /media
  echo "Starting to load TGA vectors into Django"
  python3 manage.py vectorize --elasticingest False --agency TGA --vector_file "/app/media/tga_vectors.json"
  echo "TGA vectors loaded!"
fi
if [[ ($LOAD_EMA_VECTORS) && ("$LOAD_EMA_VECTORS" = "True")]]; then
  # You must have pre-vectorized texts and placed the appropriate JSON file in /media
  echo "Starting to load FDA vectors into Django"
  python3 manage.py vectorize --elasticingest False --agency EMA --vector_file "/app/media/ema_vectors.json"
  echo "EMA vectors loaded!"
fi


# see docs/readme.md
if [[ ($PROVISION_ES) && ("$PROVISION_ES" = "True")]]; then
  echo "Provisioning and populating Elasticsearch"
  python3 manage.py provision_elastic --agency all --create_index True --mapping_file "/app/search/mappings/provision.json"
  echo "Finished provisioning Elasticsearch"
fi


# In production, use Gunicorn + Nginx
# TODO maybe reverse this so if nothing is passed the default is Nginx?
if [[ ($USE_NGINX) && ("$USE_NGINX" = "True" ) ]]; then
  echo "Nginx proxying requests from :8000 (Django app accessible from http://localhost:8000/)"
  nginx
  echo "Using Gunicorn on :5000 as app server / wsgi host"
  gunicorn --bind :5000 --workers 3 --threads 16 --timeout 0 dle.wsgi:application
else
  # When in dev use the Django runserver for hot reload
  python3 manage.py runserver 0.0.0.0:8000
fi
